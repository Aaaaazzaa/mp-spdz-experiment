import math
# sint: secret integers
# you can assign public numbers to sint

size = 16384
logsize = int(math.log2(size))
print_ln('logsize: %s', logsize)
print_ln('Party 0: please input %s numbers', size)
print_ln('Party 1: please input any %s numbers', size)
#
a = Array(size, sfix)
b = Array(size, sfix)
# reads in 8 numbers
print_ln('read in a')
@for_range_opt(size)
def _(i):
    a[i] = sfix.get_input_from(0)
    # print_ln('%s', a[i].reveal())
print_ln('read in b')
@for_range_opt(size)
def _(i):
    b[i] = sfix.get_input_from(1)
    # print_ln('%s', b[i].reveal())
# compute median = 50%-th rank

total0 = sum(point for point in a)
total1 = sum(point for point in b)
print_ln('total0: %s, total1: %s', total0.reveal(), total1.reveal())
#result = sum(point[0] * point[1] for point in data) / weight_total

#Index = Matrix(2, 2, regint)
#Index[0][0] = 0
#Index[1][0] = 0
#Index[0][1] = 7
#Index[1][1] = 7

#j = 0
#for i in 1, 2, 3:
#    j = j + 1
#print_ln('loop = %s', j)
start_timer(1)
a_index = 0
b_index = 0
for k in range(logsize):
    i = (1 << (logsize - k - 1)) - 1
    # print_ln('finding k-rank of a at %s = %s', i, a[i + a_index].reveal())
    # print_ln('finding k-rank of b at %s = %s', i, b[i + b_index].reveal())
    conditionb = (a[i + a_index] > b[i + b_index]).reveal()
    conditiona = (a[i + a_index] < b[i + b_index]).reveal()  # not conditiona

    a_index = a_index + (conditiona * (i + 1))
    b_index = b_index + (conditionb * (i + 1))
    # print_ln('b_index = %s', b_index)
    # print_ln('a_index = %s', a_index)
print_ln('50%-rank = %s', (sum(a[a_index], b[b_index]) / sfix(2)).reveal())
stop_timer(1)
# # branching is supported also depending on revealed secret data
# # with garbled circuits this triggers a interruption of the garbling
# size_party = 2
# size_len = 262144
# data = Matrix(size_party, size_len, sfix)
#
# # use @for_range_opt for balanced optimization
# # but use Python loops if compile-time numbers are need (e.g., for players)
#
# @for_range_opt(size_party)
# def _(i):
#     print_ln('reading in party %s', i)
#     for j in range(size_len):
#         data[i][j] = sfix.get_input_from(i)
#
# # compute weighted average
# start_timer(1)
# weight_total = sum(data[0])
# result = sum(sum(data[p] * data[0]) for p in range(size_party)) / weight_total / sint(size_party-1)
# print_ln('weighted avg %s', result.reveal())
# stop_timer(1)